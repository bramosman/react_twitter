{"ast":null,"code":"var _jsxFileName = \"/Users/mlh/Documents/my-react-firestore-app/src/components/MainContainer.js\",\n  _s = $RefreshSig$();\n// src/components/MainContainer.js\nimport React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { getTweets } from '../api/twitterAPI.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MainContentWrapper = styled.div`\n  flex: 1;\n  padding: 20px;\n`;\n_c = MainContentWrapper;\nconst MainContainer = () => {\n  _s();\n  const [tweets, setTweets] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        // Fetch tweets using the getTweets function\n        const response = await getTweets('#matterport');\n        console.log('Twitter API Response:', response);\n\n        // Update state with fetched tweets\n        setTweets(response);\n        // Clear any previous errors\n        setError(null);\n      } catch (error) {\n        // Handle error\n        console.error('Error fetching tweets:', error);\n\n        // Set an error message for user display\n        setError('Error loading tweets. Please try again later.');\n      } finally {\n        // Set loading to false regardless of success or failure\n        setLoading(false);\n      }\n    };\n\n    // Call fetchData function when the component mounts\n    fetchData();\n  }, []); // The empty dependency array ensures the effect runs only once, similar to componentDidMount\n\n  return /*#__PURE__*/_jsxDEV(MainContentWrapper, {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Main Content\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading tweets...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: tweets.map(tweet => /*#__PURE__*/_jsxDEV(\"li\", {\n        style: {\n          marginBottom: '10px'\n        },\n        children: tweet.text\n      }, tweet.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: 'red'\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n};\n_s(MainContainer, \"TsviQxYgQYw3EKAENgdCofvw9w8=\");\n_c2 = MainContainer;\nexport default MainContainer;\nvar _c, _c2;\n$RefreshReg$(_c, \"MainContentWrapper\");\n$RefreshReg$(_c2, \"MainContainer\");","map":{"version":3,"names":["React","useState","useEffect","styled","getTweets","jsxDEV","_jsxDEV","MainContentWrapper","div","_c","MainContainer","_s","tweets","setTweets","loading","setLoading","error","setError","fetchData","response","console","log","children","fileName","_jsxFileName","lineNumber","columnNumber","map","tweet","style","marginBottom","text","id","color","_c2","$RefreshReg$"],"sources":["/Users/mlh/Documents/my-react-firestore-app/src/components/MainContainer.js"],"sourcesContent":["// src/components/MainContainer.js\nimport React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { getTweets } from '../api/twitterAPI.js';\n\nconst MainContentWrapper = styled.div`\n  flex: 1;\n  padding: 20px;\n`;\n\nconst MainContainer = () => {\n  const [tweets, setTweets] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        // Fetch tweets using the getTweets function\n        const response = await getTweets('#matterport');\n        console.log('Twitter API Response:', response);\n\n        // Update state with fetched tweets\n        setTweets(response);\n        // Clear any previous errors\n        setError(null);\n      } catch (error) {\n        // Handle error\n        console.error('Error fetching tweets:', error);\n\n        // Set an error message for user display\n        setError('Error loading tweets. Please try again later.');\n      } finally {\n        // Set loading to false regardless of success or failure\n        setLoading(false);\n      }\n    };\n\n    // Call fetchData function when the component mounts\n    fetchData();\n  }, []); // The empty dependency array ensures the effect runs only once, similar to componentDidMount\n\n  return (\n    <MainContentWrapper>\n      <h2>Main Content</h2>\n      {loading ? (\n        <p>Loading tweets...</p>\n      ) : (\n        <ul>\n          {tweets.map((tweet) => (\n            <li key={tweet.id} style={{ marginBottom: '10px' }}>\n              {tweet.text}\n            </li>\n          ))}\n        </ul>\n      )}\n      {error && <p style={{ color: 'red' }}>{error}</p>}\n    </MainContentWrapper>\n  );\n};\n\nexport default MainContainer;\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,MAAM,MAAM,mBAAmB;AACtC,SAASC,SAAS,QAAQ,sBAAsB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjD,MAAMC,kBAAkB,GAAGJ,MAAM,CAACK,GAAI;AACtC;AACA;AACA,CAAC;AAACC,EAAA,GAHIF,kBAAkB;AAKxB,MAAMG,aAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC1B,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACa,OAAO,EAAEC,UAAU,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACe,KAAK,EAAEC,QAAQ,CAAC,GAAGhB,QAAQ,CAAC,IAAI,CAAC;EAExCC,SAAS,CAAC,MAAM;IACd,MAAMgB,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACF;QACA,MAAMC,QAAQ,GAAG,MAAMf,SAAS,CAAC,aAAa,CAAC;QAC/CgB,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEF,QAAQ,CAAC;;QAE9C;QACAN,SAAS,CAACM,QAAQ,CAAC;QACnB;QACAF,QAAQ,CAAC,IAAI,CAAC;MAChB,CAAC,CAAC,OAAOD,KAAK,EAAE;QACd;QACAI,OAAO,CAACJ,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;;QAE9C;QACAC,QAAQ,CAAC,+CAA+C,CAAC;MAC3D,CAAC,SAAS;QACR;QACAF,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;;IAED;IACAG,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,oBACEZ,OAAA,CAACC,kBAAkB;IAAAe,QAAA,gBACjBhB,OAAA;MAAAgB,QAAA,EAAI;IAAY;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACpBZ,OAAO,gBACNR,OAAA;MAAAgB,QAAA,EAAG;IAAiB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,gBAExBpB,OAAA;MAAAgB,QAAA,EACGV,MAAM,CAACe,GAAG,CAAEC,KAAK,iBAChBtB,OAAA;QAAmBuB,KAAK,EAAE;UAAEC,YAAY,EAAE;QAAO,CAAE;QAAAR,QAAA,EAChDM,KAAK,CAACG;MAAI,GADJH,KAAK,CAACI,EAAE;QAAAT,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEb,CACL;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CACL,EACAV,KAAK,iBAAIV,OAAA;MAAGuB,KAAK,EAAE;QAAEI,KAAK,EAAE;MAAM,CAAE;MAAAX,QAAA,EAAEN;IAAK;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC/B,CAAC;AAEzB,CAAC;AAACf,EAAA,CAjDID,aAAa;AAAAwB,GAAA,GAAbxB,aAAa;AAmDnB,eAAeA,aAAa;AAAC,IAAAD,EAAA,EAAAyB,GAAA;AAAAC,YAAA,CAAA1B,EAAA;AAAA0B,YAAA,CAAAD,GAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}